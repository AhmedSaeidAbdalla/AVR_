
/*library inclusion*/
#include "../../LIB/BIT_MATH.h"
#include "../../LIB/STD_TYPES.h"

/*Lower Layer Inclusions*/

/*Self inclusions*/
#include "Interface.h"
#include "private.h"




void DIO_voidSetPinState(u8 Copy_u8PortName, u8 Copy_u8PinNumber, u8 Copy_u8State)
{
	switch (Copy_u8PortName)
	{
	case DIO_PORTA:
		if( Copy_u8State == OUTPUT )
		{
			SET_BIT(DDRA,Copy_u8PinNumber);
		}
		else if( Copy_u8State == INPUT )
		{
			CLR_BIT(DDRA,Copy_u8PinNumber);
		}
		else
					{

					}
	break;
	case DIO_PORTB:
		if( Copy_u8State == OUTPUT )
				{
					SET_BIT(DDRB,Copy_u8PinNumber);
				}
				else if( Copy_u8State == INPUT )
				{
					CLR_BIT(DDRB,Copy_u8PinNumber);
				}
				else
							{

							}
	break;
	case DIO_PORTC:
		if( Copy_u8State == OUTPUT )
			{
				SET_BIT(DDRC,Copy_u8PinNumber);
			}
			else if( Copy_u8State == INPUT )
			{
				CLR_BIT(DDRC,Copy_u8PinNumber);
			}
			else
						{

						}
	break;
	case DIO_PORTD:
		if( Copy_u8State == OUTPUT )
			{
				SET_BIT(DDRD,Copy_u8PinNumber);
			}
			else if( Copy_u8State == INPUT )
			{
				CLR_BIT(DDRD,Copy_u8PinNumber);
			}

			else
			{

			}
	break;
	default:

	break;

	}
}

void DIO_voidSetPinValue(u8 Copy_u8PortName, u8 Copy_u8PinNumber, u8 Copy_u8PinState)
{
switch (Copy_u8PortName)
{
case DIO_PORTA:
	switch(Copy_u8PinState)
	{
	case LOW:
		CLR_BIT(PORTA,Copy_u8PinNumber);
		break;
	case HIGH:
		SET_BIT(PORTA,Copy_u8PinNumber);
		break;
	}
case DIO_PORTB:
	switch(Copy_u8PinState)
	{
	case LOW:
		CLR_BIT(PORTB,Copy_u8PinNumber);
		break;
	case HIGH:
		SET_BIT(PORTB,Copy_u8PinNumber);
		break;
	}
case DIO_PORTC:
	switch(Copy_u8PinState)
	{
	case LOW:
		CLR_BIT(PORTC,Copy_u8PinNumber);
		break;
	case HIGH:
		SET_BIT(PORTC,Copy_u8PinNumber);
		break;
	}
case DIO_PORTD:
	switch(Copy_u8PinState)
	{
	case LOW:
		CLR_BIT(PORTD,Copy_u8PinNumber);
		break;
	case HIGH:
		SET_BIT(PORTD,Copy_u8PinNumber);
		break;
	}
}
}

u8 DIO_u8GetPinValue(u8 Copy_u8PortName, u8 Copy_u8PinNumber)
{
	u8 Local_u8PinValue=0;
	switch(Copy_u8PortName)
	{
	case DIO_PORTA:
			Local_u8PinValue=GET_BIT(PINA,Copy_u8PinNumber);
	break;
	case DIO_PORTB:
			Local_u8PinValue=GET_BIT(PINB,Copy_u8PinNumber);
		break;
	case DIO_PORTC:
			Local_u8PinValue=GET_BIT(PINC,Copy_u8PinNumber);
		break;
	case DIO_PORTD:
			Local_u8PinValue=GET_BIT(PIND,Copy_u8PinNumber);
		break;
	}
	return Local_u8PinValue;
}
void DIO_voidsetportSpecifiDireaction( u8 copy_u8portname , u8 copy_specificdireaction)
{
	switch(copy_u8portname)
	{
	case DIO_PORTA :
		DDRA = copy_specificdireaction;
		SET_REG ( DDRA ,copy_specificdireaction );
		break;
	case DIO_PORTB :
			DDRB = copy_specificdireaction;
			SET_REG ( DDRB ,copy_specificdireaction );
			break;
	case DIO_PORTC :
			DDRC = copy_specificdireaction;
			SET_REG ( DDRC ,copy_specificdireaction );
			break;
	}

}
void DIO_voidsetportValue(u8 copy_u8portname , u8 copy_u8portvalue)
{
	switch(copy_u8portname)
	{
	case DIO_PORTA :
		SET_REG ( DDRA , copy_u8portvalue);
		break;
	case DIO_PORTB :
			SET_REG ( DDRB , copy_u8portvalue);
			break;
	case DIO_PORTC :
			SET_REG ( DDRC , copy_u8portvalue);
			break;

	}
}

